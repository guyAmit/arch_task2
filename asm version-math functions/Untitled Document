;;; 64bit-fp01.x86-64
;;;
;;; Programmer: guy amit, 2018

section .data
num1_real_string:
	db "num1 real part is %f ", 10, 0
num1_img_string:
  db "num2 real part is %f ", 10, 0
num1_real:
  dq 1.000
num1_img:
  dq 2.000
num2_real:
  dq  2.00
num2_img:
  dq  3.00

extern printf
global main
section .text
main:

	nop
	enter 0, 0		; prepare a frame

	finit			; initialize the x87 subsystem

  fld qword [num2_real]	; load [num2 part] into st(0)
  fst st1			; copy st(0) into st(1)
  fld qword[num1_real] ; load [num1 part] into the st(0)
  fadd			; st(0) += st(1)
  fst qword [num1_real]	; store st(0) into [num1 part]

  mov rdi, num1_real_string	; move the format string into rdi
  push qword [num1_real]	; push the radius onto the stack
  push qword [num1_real]
  ;xmm0, xmm1 are the SIMD registers; This is outside the x87 subsystem
  ; and part of the SSE subsystem:
  ;   mm0, mm1, ... are part of the MMX subsystem
  ;   xmm0, xmm1, ... are twice the size of mm0, mm1, ... and of which
  ;   these are their lower half, respectively.
  movsd xmm0, qword [rbp - 8*1] ; notice the special move instruction!
  movsd xmm1, qword [rbp - 8*2]
  ; we use 2 floating point registers to handle 2 floating point args
  mov rax, 2
  call printf

	leave			; dump the top frame
	ret			; return from main
